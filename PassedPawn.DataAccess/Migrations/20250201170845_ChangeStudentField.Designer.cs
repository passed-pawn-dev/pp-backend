// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PassedPawn.DataAccess;

#nullable disable

namespace PassedPawn.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250201170845_ChangeStudentField")]
    partial class ChangeStudentField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChessTitle")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("text");

                    b.Property<int>("Elo")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Coaches");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.CourseReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseReviews");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ThumbnailId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.CourseExample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Pgn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("CourseExamples");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.CourseExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LessonId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Pgn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("CourseExercises");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.CourseVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourseVideos");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonNumber")
                        .HasColumnType("integer");

                    b.Property<int>("VideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("VideoId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FlagId")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.HasIndex("FlagId");

                    b.ToTable("Nationalities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FlagId = 1,
                            FullName = "United States",
                            ShortName = "USA"
                        },
                        new
                        {
                            Id = 2,
                            FlagId = 2,
                            FullName = "Canada",
                            ShortName = "CAN"
                        },
                        new
                        {
                            Id = 3,
                            FlagId = 3,
                            FullName = "United Kingdom",
                            ShortName = "UK"
                        },
                        new
                        {
                            Id = 4,
                            FlagId = 4,
                            FullName = "Australia",
                            ShortName = "AUS"
                        },
                        new
                        {
                            Id = 5,
                            FlagId = 5,
                            FullName = "Germany",
                            ShortName = "GER"
                        },
                        new
                        {
                            Id = 6,
                            FlagId = 6,
                            FullName = "France",
                            ShortName = "FRA"
                        },
                        new
                        {
                            Id = 7,
                            FlagId = 7,
                            FullName = "Italy",
                            ShortName = "ITA"
                        },
                        new
                        {
                            Id = 8,
                            FlagId = 8,
                            FullName = "Spain",
                            ShortName = "ESP"
                        },
                        new
                        {
                            Id = 9,
                            FlagId = 9,
                            FullName = "Japan",
                            ShortName = "JPN"
                        },
                        new
                        {
                            Id = 10,
                            FlagId = 10,
                            FullName = "China",
                            ShortName = "CHN"
                        },
                        new
                        {
                            Id = 11,
                            FlagId = 11,
                            FullName = "India",
                            ShortName = "IND"
                        },
                        new
                        {
                            Id = 12,
                            FlagId = 12,
                            FullName = "Brazil",
                            ShortName = "BRA"
                        },
                        new
                        {
                            Id = 13,
                            FlagId = 13,
                            FullName = "Mexico",
                            ShortName = "MEX"
                        },
                        new
                        {
                            Id = 14,
                            FlagId = 14,
                            FullName = "Russia",
                            ShortName = "RUS"
                        },
                        new
                        {
                            Id = 15,
                            FlagId = 15,
                            FullName = "South Africa",
                            ShortName = "RSA"
                        },
                        new
                        {
                            Id = 16,
                            FlagId = 16,
                            FullName = "South Korea",
                            ShortName = "KOR"
                        },
                        new
                        {
                            Id = 17,
                            FlagId = 17,
                            FullName = "Argentina",
                            ShortName = "ARG"
                        },
                        new
                        {
                            Id = 18,
                            FlagId = 18,
                            FullName = "Saudi Arabia",
                            ShortName = "KSA"
                        },
                        new
                        {
                            Id = 19,
                            FlagId = 19,
                            FullName = "Turkey",
                            ShortName = "TUR"
                        },
                        new
                        {
                            Id = 20,
                            FlagId = 20,
                            FullName = "Netherlands",
                            ShortName = "NED"
                        },
                        new
                        {
                            Id = 21,
                            FlagId = 21,
                            FullName = "Sweden",
                            ShortName = "SWE"
                        },
                        new
                        {
                            Id = 22,
                            FlagId = 22,
                            FullName = "Switzerland",
                            ShortName = "CHE"
                        },
                        new
                        {
                            Id = 23,
                            FlagId = 23,
                            FullName = "Poland",
                            ShortName = "POL"
                        },
                        new
                        {
                            Id = 24,
                            FlagId = 24,
                            FullName = "Egypt",
                            ShortName = "EGY"
                        },
                        new
                        {
                            Id = 25,
                            FlagId = 25,
                            FullName = "Nigeria",
                            ShortName = "NGA"
                        });
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        },
                        new
                        {
                            Id = 5
                        },
                        new
                        {
                            Id = 6
                        },
                        new
                        {
                            Id = 7
                        },
                        new
                        {
                            Id = 8
                        },
                        new
                        {
                            Id = 9
                        },
                        new
                        {
                            Id = 10
                        },
                        new
                        {
                            Id = 11
                        },
                        new
                        {
                            Id = 12
                        },
                        new
                        {
                            Id = 13
                        },
                        new
                        {
                            Id = 14
                        },
                        new
                        {
                            Id = 15
                        },
                        new
                        {
                            Id = 16
                        },
                        new
                        {
                            Id = 17
                        },
                        new
                        {
                            Id = 18
                        },
                        new
                        {
                            Id = 19
                        },
                        new
                        {
                            Id = 20
                        },
                        new
                        {
                            Id = 21
                        },
                        new
                        {
                            Id = 22
                        },
                        new
                        {
                            Id = 23
                        },
                        new
                        {
                            Id = 24
                        },
                        new
                        {
                            Id = 25
                        });
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Puzzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("integer");

                    b.Property<string>("Fen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Solution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Puzzle");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChessTitle")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("Elo")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("PhotoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NationalityId");

                    b.HasIndex("PhotoId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("PuzzleStudent", b =>
                {
                    b.Property<int>("PuzzlesId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("PuzzlesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("PuzzleStudent");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Coach", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PassedPawn.DataAccess.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Nationality");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.CourseReview", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Courses.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PassedPawn.DataAccess.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.Course", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Photo", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.CourseExample", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Courses.Lesson", "Lesson")
                        .WithMany("Examples")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.CourseExercise", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Courses.Lesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.Lesson", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Courses.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PassedPawn.DataAccess.Entities.Courses.CourseVideo", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Nationality", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Photo", "Flag")
                        .WithMany()
                        .HasForeignKey("FlagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flag");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Puzzle", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Student", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PassedPawn.DataAccess.Entities.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");

                    b.Navigation("Nationality");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("PuzzleStudent", b =>
                {
                    b.HasOne("PassedPawn.DataAccess.Entities.Puzzle", null)
                        .WithMany()
                        .HasForeignKey("PuzzlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PassedPawn.DataAccess.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.Course", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PassedPawn.DataAccess.Entities.Courses.Lesson", b =>
                {
                    b.Navigation("Examples");

                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
